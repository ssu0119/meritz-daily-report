import React, { useState, useEffect } from 'react';
import { db } from './firebase';
import { doc, setDoc, getDoc, collection, getDocs, serverTimestamp } from 'firebase/firestore';

// Firebase Í∏∞Î≥∏ Ï†ÄÏû• Ìï®Ïàò
const saveToFirebase = async (date, reportData) => {
  try {
    const docRef = doc(db, 'dailyReports', date);
    await setDoc(docRef, { 
      ...reportData, 
      lastUpdated: serverTimestamp(), 
      lastUpdatedBy: reportData.senderName 
    });
    
    console.log('Firebase Ï†ÄÏû• ÏôÑÎ£å:', date, reportData);
    return true;
  } catch (error) {
    console.error('Firebase Ï†ÄÏû• Ïã§Ìå®:', error);
    return false;
  }
};

// üõ°Ô∏è ÏßÑÏßú ÏïàÏ†ÑÌïú ÏÑπÏÖòÎ≥Ñ Î≥ëÌï© ÏãúÏä§ÌÖú
const realSafeSaveToFirebase = async (date, localData, updatedSection, senderName) => {
  const maxRetries = 5;
  let retryCount = 0;
  
  while (retryCount < maxRetries) {
    try {
      console.log(`üõ°Ô∏è ÏßÑÏßú ÏïàÏ†ÑÌïú Ï†ÄÏû• ÏãúÎèÑ ${retryCount + 1}/${maxRetries}:`, { date, updatedSection, senderName });
      
      // 1. Ìï≠ÏÉÅ ÏµúÏã† ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
      const docRef = doc(db, 'dailyReports', date);
      const docSnap = await getDoc(docRef);
      
      let serverData = null;
      if (docSnap.exists()) {
        serverData = docSnap.data();
        console.log('üì• ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®');
      }
      
      // 2. Î≥ëÌï© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      let mergedData;
      
      if (!serverData) {
        // ÏÑúÎ≤ÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ - Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Î°ú ÏÉàÎ°ú ÏÉùÏÑ±
        mergedData = JSON.parse(JSON.stringify(localData));
        mergedData.version = 1;
        console.log('üÜï ÏÉà Î¨∏ÏÑú ÏÉùÏÑ±');
      } else {
        // ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏúºÎ°ú Î≥ëÌï© ÏãúÏûë
        mergedData = JSON.parse(JSON.stringify(serverData));
        
        // üî• ÌïµÏã¨: ÏàòÏ†ïÎêú ÏÑπÏÖòÎßå ÍµêÏ≤¥, ÎÇòÎ®∏ÏßÄÎäî ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ
        if (updatedSection === 'daOverall') {
          mergedData.daOverall = JSON.parse(JSON.stringify(localData.daOverall));
          console.log('üîÑ DAÏ†ÑÏ≤¥Îßå ÏóÖÎç∞Ïù¥Ìä∏ (Îã§Î•∏ ÏÑπÏÖòÏùÄ ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ)');
        } else if (updatedSection === 'partnership') {
          mergedData.partnership = JSON.parse(JSON.stringify(localData.partnership));
          console.log('üîÑ Ï†úÌú¥Îßå ÏóÖÎç∞Ïù¥Ìä∏ (Îã§Î•∏ ÏÑπÏÖòÏùÄ ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ)');
        } else if (updatedSection === 'attachmentNote') {
          mergedData.attachmentNote = localData.attachmentNote;
          console.log('üîÑ Ï≤®Î∂ÄÌååÏùº ÏïàÎÇ¥Îßå ÏóÖÎç∞Ïù¥Ìä∏ (Îã§Î•∏ ÏÑπÏÖòÏùÄ ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ)');
        } else if (updatedSection.startsWith('media_')) {
          // Í∞úÎ≥Ñ Îß§Ï≤¥Îßå ÏóÖÎç∞Ïù¥Ìä∏
          const mediaName = updatedSection.replace('media_', '');
          if (!mergedData.mediaDetails) {
            mergedData.mediaDetails = {};
          }
          // üî• ÌïµÏã¨: Ìï¥Îãπ Îß§Ï≤¥Îßå ÍµêÏ≤¥, Îã§Î•∏ Îß§Ï≤¥Îäî ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ
          mergedData.mediaDetails[mediaName] = JSON.parse(JSON.stringify(localData.mediaDetails[mediaName]));
          console.log(`üîÑ ${mediaName}Îßå ÏóÖÎç∞Ïù¥Ìä∏ (Îã§Î•∏ Îß§Ï≤¥Îäî ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ)`);
        } else if (updatedSection === 'senderName') {
          mergedData.senderName = localData.senderName;
          console.log('üîÑ Î≥¥ÎÇ¥Îäî ÏÇ¨ÎûåÎßå ÏóÖÎç∞Ïù¥Ìä∏');
        }
        
        // Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä
        mergedData.version = (serverData.version || 0) + 1;
        console.log(`üìä Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä: ${serverData.version || 0} ‚Üí ${mergedData.version}`);
      }
      
      // 3. Í∏∞Î≥∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
      mergedData.date = date;
      mergedData.lastUpdated = serverTimestamp();
      mergedData.lastUpdatedBy = senderName;
      mergedData.lastUpdatedSection = updatedSection;
      mergedData.lastUpdatedTime = new Date().toISOString();
      
      // 4. Ï†ÄÏû•
      await setDoc(docRef, mergedData);
      
      console.log('‚úÖ ÏßÑÏßú ÏïàÏ†ÑÌïú Ï†ÄÏû• ÏôÑÎ£å:', { 
        version: mergedData.version, 
        updatedSection,
        preservedSections: 'Îã§Î•∏ ÏÑπÏÖòÏùÄ ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄÎê®'
      });
      
      return { success: true, mergedData };
      
    } catch (error) {
      console.error(`‚ùå Ï†ÄÏû• Ïã§Ìå® (ÏãúÎèÑ ${retryCount + 1}):`, error);
      retryCount++;
      
      if (retryCount < maxRetries) {
        const delay = Math.min(1000 * Math.pow(2, retryCount), 8000);
        console.log(`‚è≥ ${delay}ms ÌõÑ Ïû¨ÏãúÎèÑ...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  return { success: false, error: 'ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º' };
};

const loadFromFirebase = async (date) => {
  try {
    const docRef = doc(db, 'dailyReports', date);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      const data = docSnap.data();
      console.log('Firebase Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å:', date, data);
      return data;
    } else {
      console.log('Ìï¥Îãπ ÎÇ†ÏßúÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§:', date);
      return null;
    }
  } catch (error) {
    console.error('Firebase Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
    return null;
  }
};

const getAllReports = async () => {
  try {
    const querySnapshot = await getDocs(collection(db, 'dailyReports'));
    const reports = [];
    
    querySnapshot.forEach((doc) => {
      reports.push({
        id: doc.id,
        date: doc.id,
        ...doc.data()
      });
    });
    
    console.log('Firebase Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å:', reports);
    return reports.sort((a, b) => new Date(b.date) - new Date(a.date));
  } catch (error) {
    console.error('Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
    return [];
  }
};

// Îç∞Ïù¥ÌÑ∞ Ìò∏ÌôòÏÑ± Ìï®Ïàò
const migrateDataStructure = (data) => {
  if (!data) return null;
  
  const migratedData = { ...data };
  
  // daOverall ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
  if (migratedData.daOverall) {
    if (migratedData.daOverall.image !== undefined && !migratedData.daOverall.images) {
      migratedData.daOverall.images = [
        { src: migratedData.daOverall.image, includeInEmail: migratedData.daOverall.image ? true : false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' }
      ];
      delete migratedData.daOverall.image;
    }
  }
  
  // mediaDetails ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
  if (migratedData.mediaDetails) {
    Object.keys(migratedData.mediaDetails).forEach(media => {
      if (migratedData.mediaDetails[media].image !== undefined && !migratedData.mediaDetails[media].images) {
        migratedData.mediaDetails[media].images = [
          { src: migratedData.mediaDetails[media].image, includeInEmail: migratedData.mediaDetails[media].image ? true : false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ];
        delete migratedData.mediaDetails[media].image;
      }
    });
  }
  
  // partnership ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
  if (migratedData.partnership) {
    if (migratedData.partnership.image !== undefined && !migratedData.partnership.images) {
      migratedData.partnership.images = [
        { src: migratedData.partnership.image, includeInEmail: migratedData.partnership.image ? true : false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' }
      ];
      delete migratedData.partnership.image;
    }
  }
  
  return migratedData;
};

const DailyReportPlatform = () => {
  const [currentMedia, setCurrentMedia] = useState('');
  const [reportData, setReportData] = useState({
    date: '',
    senderName: 'Î∞ïÌù¨Ïàò',
    daOverall: {
      totalBudget: '',
      totalLeads: '',
      totalCPA: '',
      images: [
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' }
      ]
    },
    mediaDetails: {
      'ÌÜ†Ïä§': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      },
      'ÎÑ§Ïù¥Î≤ÑGFA': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      },
      'ÎÑ§Ïù¥Î≤ÑNOSP': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      },
      'Ïπ¥Ïπ¥Ïò§': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      },
      'Íµ¨Í∏Ä': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      },
      'Î©îÌÉÄ': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      },
      'Ïï±Ï∫†ÌéòÏù∏': { 
        content: '', 
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ], 
        noUpdate: false 
      }
    },
    partnership: {
      totalBudget: '',
      totalLeads: '',
      totalCPA: '',
      details: '',
      images: [
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' },
        { src: null, includeInEmail: false, caption: '' }
      ],
      weeklyPlan: ''
    },
    attachmentNote: ''
  });

  const [generatedEmail, setGeneratedEmail] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [showArchive, setShowArchive] = useState(false);
  const [allReports, setAllReports] = useState([]);
  const [archiveSuccess, setArchiveSuccess] = useState(false);
  const [resetSuccess, setResetSuccess] = useState(false);
  const [showResetConfirm, setShowResetConfirm] = useState(false);
  const [gmailSaveSuccess, setGmailSaveSuccess] = useState(false);
  const [gmailSaveError, setGmailSaveError] = useState('');
  const [isGmailLoading, setIsGmailLoading] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [syncSuccess, setSyncSuccess] = useState(false);
  const [showTeamView, setShowTeamView] = useState(false);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [lastUpdatedBy, setLastUpdatedBy] = useState('');
  const [popupImage, setPopupImage] = useState(null);
  const [smartSaveSuccess, setSmartSaveSuccess] = useState(false);
  const [lastSavedSection, setLastSavedSection] = useState('');

  const mediaList = [
    { id: 'DAÏ†ÑÏ≤¥', name: 'DA Ï†ÑÏ≤¥', icon: 'üìä', bgColor: '#3B82F6' },
    { id: 'ÌÜ†Ïä§', name: 'ÌÜ†Ïä§', icon: 'üí≥', bgColor: '#10B981' },
    { id: 'ÎÑ§Ïù¥Î≤ÑGFA', name: 'ÎÑ§Ïù¥Î≤Ñ GFA', icon: 'üîç', bgColor: '#059669' },
    { id: 'ÎÑ§Ïù¥Î≤ÑNOSP', name: 'ÎÑ§Ïù¥Î≤Ñ NOSP', icon: 'üì±', bgColor: '#0891B2' },
    { id: 'Ïπ¥Ïπ¥Ïò§', name: 'Ïπ¥Ïπ¥Ïò§', icon: 'üí¨', bgColor: '#EAB308' },
    { id: 'Íµ¨Í∏Ä', name: 'Íµ¨Í∏Ä', icon: 'üåê', bgColor: '#DC2626' },
    { id: 'Î©îÌÉÄ', name: 'Î©îÌÉÄ', icon: 'üìò', bgColor: '#7C3AED' },
    { id: 'Ïï±Ï∫†ÌéòÏù∏', name: 'Ïï±Ï∫†ÌéòÏù∏', icon: 'üì±', bgColor: '#4F46E5' },
    { id: 'Ï†úÌú¥', name: 'Ï†úÌú¥', icon: 'ü§ù', bgColor: '#EA580C' }
  ];

  const styles = {
    container: {
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #EFF6FF 0%, #E0E7FF 100%)',
      padding: '16px',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
    },
    mainCard: {
      maxWidth: '1200px',
      margin: '0 auto',
      backgroundColor: 'white',
      borderRadius: '24px',
      boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
      padding: '24px'
    },
    statusCard: {
      backgroundColor: 'white',
      borderRadius: '16px',
      boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
      padding: '16px',
      marginBottom: '16px'
    },
    title: {
      fontSize: '32px',
      fontWeight: 'bold',
      color: '#1F2937',
      textAlign: 'center',
      marginBottom: '8px'
    },
    subtitle: {
      fontSize: '20px',
      color: '#6B7280',
      textAlign: 'center',
      marginBottom: '24px'
    },
    inputGroup: {
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      marginBottom: '16px'
    },
    input: {
      padding: '12px 16px',
      border: '1px solid #D1D5DB',
      borderRadius: '8px',
      fontSize: '14px',
      outline: 'none',
      transition: 'all 0.2s'
    },
    button: {
      padding: '12px 24px',
      borderRadius: '8px',
      border: 'none',
      cursor: 'pointer',
      fontWeight: '600',
      fontSize: '14px',
      transition: 'all 0.2s',
      display: 'flex',
      alignItems: 'center',
      gap: '8px'
    },
    mediaGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
      gap: '16px',
      marginBottom: '24px'
    },
    mediaButton: {
      padding: '20px',
      borderRadius: '16px',
      border: '2px solid #E5E7EB',
      backgroundColor: 'white',
      cursor: 'pointer',
      textAlign: 'center',
      position: 'relative',
      transition: 'all 0.2s',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center'
    },
    mediaIcon: {
      fontSize: '32px',
      marginBottom: '12px'
    },
    mediaName: {
      fontSize: '16px',
      fontWeight: '600',
      color: '#1F2937',
      marginBottom: '4px'
    },
    mediaStatus: {
      fontSize: '12px',
      color: '#6B7280'
    },
    statusBadge: {
      position: 'absolute',
      top: '8px',
      right: '8px',
      width: '20px',
      height: '20px',
      borderRadius: '50%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: '12px',
      color: 'white',
      fontWeight: 'bold'
    },
    actionGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(2, 1fr)',
      gap: '12px'
    },
    modal: {
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000
    },
    modalContent: {
      backgroundColor: 'white',
      borderRadius: '16px',
      padding: '32px',
      maxWidth: '400px',
      margin: '16px',
      boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'
    }
  };

  const getDefaultDate = () => {
    const today = new Date();
    const dayOfWeek = today.getDay();
    
    if (dayOfWeek === 1) {
      const friday = new Date(today);
      friday.setDate(today.getDate() - 3);
      return friday.toISOString().split('T')[0];
    } else {
      const yesterday = new Date(today);
      yesterday.setDate(today.getDate() - 1);
      return yesterday.toISOString().split('T')[0];
    }
  };

  const handleDateChange = async (newDate) => {
    setIsLoading(true);
    
    if (reportData.date) {
      await saveToFirebase(reportData.date, reportData);
    }
    
    const savedData = await loadFromFirebase(newDate);
    const migratedData = migrateDataStructure(savedData);
    
    const defaultData = {
      date: newDate,
      senderName: reportData.senderName,
      daOverall: {
        totalBudget: '',
        totalLeads: '',
        totalCPA: '',
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ]
      },
      mediaDetails: {
        'ÌÜ†Ïä§': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'ÎÑ§Ïù¥Î≤ÑGFA': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'ÎÑ§Ïù¥Î≤ÑNOSP': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Ïπ¥Ïπ¥Ïò§': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Íµ¨Í∏Ä': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Î©îÌÉÄ': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Ïï±Ï∫†ÌéòÏù∏': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        }
      },
      partnership: {
        totalBudget: '',
        totalLeads: '',
        totalCPA: '',
        details: '',
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ],
        weeklyPlan: ''
      },
      attachmentNote: ''
    };

    setReportData(migratedData || defaultData);
    setLastUpdatedBy(migratedData?.lastUpdatedBy || '');
    setIsLoading(false);
  };

  useEffect(() => {
    const initializeData = async () => {
      setIsLoading(true);
      const defaultDate = getDefaultDate();
      
      const savedData = await loadFromFirebase(defaultDate);
      const migratedData = migrateDataStructure(savedData);
      
      const defaultData = {
        date: defaultDate,
        senderName: 'Î∞ïÌù¨Ïàò',
        daOverall: {
          totalBudget: '',
          totalLeads: '',
          totalCPA: '',
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ]
        },
        mediaDetails: {
          'ÌÜ†Ïä§': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          },
          'ÎÑ§Ïù¥Î≤ÑGFA': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          },
          'ÎÑ§Ïù¥Î≤ÑNOSP': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          },
          'Ïπ¥Ïπ¥Ïò§': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          },
          'Íµ¨Í∏Ä': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          },
          'Î©îÌÉÄ': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          },
          'Ïï±Ï∫†ÌéòÏù∏': { 
            content: '', 
            images: [
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' },
              { src: null, includeInEmail: false, caption: '' }
            ], 
            noUpdate: false 
          }
        },
        partnership: {
          totalBudget: '',
          totalLeads: '',
          totalCPA: '',
          details: '',
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ],
          weeklyPlan: ''
        },
        attachmentNote: ''
      };

      setReportData(migratedData || defaultData);
      setLastUpdatedBy(migratedData?.lastUpdatedBy || '');
      
      const reports = await getAllReports();
      setAllReports(reports);
      setIsLoading(false);
    };
    
    initializeData();
  }, []);

  // üõ°Ô∏è ÏßÑÏßú ÏïàÏ†ÑÌïú ÏûêÎèô Ï†ÄÏû• ÏãúÏä§ÌÖú
  useEffect(() => {
    const autoSaveInterval = setInterval(async () => {
      if (reportData.date && !isLoading && currentMedia) {
        let section;
        if (currentMedia === 'DAÏ†ÑÏ≤¥') {
          section = 'daOverall';
        } else if (currentMedia === 'Ï†úÌú¥') {
          section = 'partnership';
        } else if (currentMedia !== 'ÎØ∏Î¶¨Î≥¥Í∏∞') {
          section = `media_${currentMedia}`;
        }
        
        if (section) {
          console.log(`üõ°Ô∏è ÏûêÎèô Ï†ÄÏû• ÏãúÏûë: ${section} (Îã§Î•∏ ÏÑπÏÖòÏùÄ Î≥¥Ï°¥)`);
          const result = await realSafeSaveToFirebase(reportData.date, reportData, section, reportData.senderName);
          if (result.success) {
            setSyncSuccess(true);
            console.log('‚úÖ ÏûêÎèô Ï†ÄÏû• ÏÑ±Í≥µ - Îã§Î•∏ ÌåÄÏõê Îç∞Ïù¥ÌÑ∞ Î≥¥Ï°¥Îê®');
            setTimeout(() => setSyncSuccess(false), 3000);
          } else {
            console.error('‚ùå ÏûêÎèô Ï†ÄÏû• Ïã§Ìå®:', result.error);
          }
        }
      }
    }, 25000); // 25Ï¥à

    return () => clearInterval(autoSaveInterval);
  }, [reportData, isLoading, currentMedia]);

  // ESC ÌÇ§ Ï≤òÎ¶¨ useEffect
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape' && popupImage) {
        closePopup();
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [popupImage]);

  const handleCheckboxChange = (section, media, index, checked) => {
    if (section === 'daOverall') {
      setReportData(prev => ({
        ...prev,
        daOverall: {
          ...prev.daOverall,
          images: prev.daOverall.images.map((img, i) => 
            i === index ? { ...img, includeInEmail: checked } : img
          )
        }
      }));
    } else if (section === 'mediaDetails') {
      setReportData(prev => ({
        ...prev,
        mediaDetails: {
          ...prev.mediaDetails,
          [media]: {
            ...prev.mediaDetails[media],
            images: prev.mediaDetails[media].images.map((img, i) => 
              i === index ? { ...img, includeInEmail: checked } : img
            )
          }
        }
      }));
    } else if (section === 'partnership') {
      setReportData(prev => ({
        ...prev,
        partnership: {
          ...prev.partnership,
          images: prev.partnership.images.map((img, i) => 
            i === index ? { ...img, includeInEmail: checked } : img
          )
        }
      }));
    }
  };

  const handleCaptionChange = (section, media, index, caption) => {
    // ÌïúÍ∏Ä ÏûÖÎ†• ÏµúÏ†ÅÌôî: Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    if (section === 'daOverall') {
      setReportData(prev => ({
        ...prev,
        daOverall: {
          ...prev.daOverall,
          images: prev.daOverall.images.map((img, i) => 
            i === index ? { ...img, caption } : img
          )
        }
      }));
    } else if (section === 'mediaDetails') {
      setReportData(prev => ({
        ...prev,
        mediaDetails: {
          ...prev.mediaDetails,
          [media]: {
            ...prev.mediaDetails[media],
            images: prev.mediaDetails[media].images.map((img, i) => 
              i === index ? { ...img, caption } : img
            )
          }
        }
      }));
    } else if (section === 'partnership') {
      setReportData(prev => ({
        ...prev,
        partnership: {
          ...prev.partnership,
          images: prev.partnership.images.map((img, i) => 
            i === index ? { ...img, caption } : img
          )
        }
      }));
    }
  };

  const handleImageDelete = (section, media, index) => {
    if (section === 'daOverall') {
      setReportData(prev => ({
        ...prev,
        daOverall: {
          ...prev.daOverall,
          images: prev.daOverall.images.map((img, i) => 
            i === index ? { src: null, includeInEmail: false, caption: '' } : img
          )
        }
      }));
    } else if (section === 'mediaDetails') {
      setReportData(prev => ({
        ...prev,
        mediaDetails: {
          ...prev.mediaDetails,
          [media]: {
            ...prev.mediaDetails[media],
            images: prev.mediaDetails[media].images.map((img, i) => 
              i === index ? { src: null, includeInEmail: false, caption: '' } : img
            )
          }
        }
      }));
    } else if (section === 'partnership') {
      setReportData(prev => ({
        ...prev,
        partnership: {
          ...prev.partnership,
          images: prev.partnership.images.map((img, i) => 
            i === index ? { src: null, includeInEmail: false, caption: '' } : img
          )
        }
      }));
    }
  };

  const handleImageClick = (imageSrc) => {
    setPopupImage(imageSrc);
  };

  const closePopup = () => {
    setPopupImage(null);
  };

  const handleImagePaste = (e, section, media = null, imageIndex = 0) => {
    e.preventDefault();
    const items = e.clipboardData.items;
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const blob = items[i].getAsFile();
        const reader = new FileReader();
        reader.onload = (event) => {
          const imageData = event.target.result;
          if (section === 'daOverall') {
            setReportData(prev => ({
              ...prev,
              daOverall: { 
                ...prev.daOverall, 
                images: prev.daOverall.images.map((img, idx) => 
                  idx === imageIndex ? { src: imageData, includeInEmail: true, caption: img.caption || '' } : img
                )
              }
            }));
          } else if (section === 'mediaDetails') {
            setReportData(prev => ({
              ...prev,
              mediaDetails: {
                ...prev.mediaDetails,
                [media]: { 
                  ...prev.mediaDetails[media], 
                  images: prev.mediaDetails[media].images.map((img, idx) => 
                    idx === imageIndex ? { src: imageData, includeInEmail: true, caption: img.caption || '' } : img
                  )
                }
              }
            }));
          } else if (section === 'partnership') {
            setReportData(prev => ({
              ...prev,
              partnership: { 
                ...prev.partnership, 
                images: prev.partnership.images.map((img, idx) => 
                  idx === imageIndex ? { src: imageData, includeInEmail: true, caption: img.caption || '' } : img
                )
              }
            }));
          }
        };
        reader.readAsDataURL(blob);
        break;
      }
    }
  };

  const ImageUploadSlot = ({ image, onDelete, onCheckboxChange, onCaptionChange, onPaste, section, media, index, isLarge = false, disabled = false }) => {
    const safeImage = image || { src: null, includeInEmail: false, caption: '' };
    
    return (
      <div style={{
        border: '2px dashed #D1D5DB',
        borderRadius: '8px',
        padding: '12px',
        textAlign: 'center',
        backgroundColor: disabled ? '#F3F4F6' : '#F9FAFB',
        position: 'relative',
        minHeight: isLarge ? '260px' : '180px',
        opacity: disabled ? 0.5 : 1
      }}>
        {safeImage.src ? (
          <div style={{ height: '100%', display: 'flex', flexDirection: 'column', gap: '8px' }}>
            <div style={{ position: 'relative', flex: '1' }}>
              <img 
                src={safeImage.src} 
                alt={`${media || section} ${index + 1}`}
                style={{ 
                  width: '100%', 
                  height: isLarge ? '120px' : '80px', 
                  objectFit: 'cover', 
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
                onClick={() => handleImageClick(safeImage.src)}
                title="ÌÅ¥Î¶≠ÌïòÎ©¥ ÌôïÎåÄÌï¥ÏÑú Î≥º Ïàò ÏûàÏäµÎãàÎã§"
              />
              <button
                onClick={() => onDelete(section, media, index)}
                style={{
                  position: 'absolute',
                  top: '4px',
                  right: '4px',
                  width: '24px',
                  height: '24px',
                  borderRadius: '50%',
                  backgroundColor: '#EF4444',
                  color: 'white',
                  border: 'none',
                  cursor: 'pointer',
                  fontSize: '14px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontWeight: 'bold',
                  zIndex: 10
                }}
                title="Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú"
              >
                √ó
              </button>
            </div>
            
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center',
              fontSize: '12px',
              padding: '4px 0'
            }}>
              <input 
                type="checkbox" 
                checked={safeImage.includeInEmail}
                onChange={(e) => onCheckboxChange(section, media, index, e.target.checked)}
                style={{ marginRight: '6px', width: '14px', height: '14px' }}
              />
              <span style={{ color: '#374151', fontWeight: '500' }}>Î©îÏùº Ìè¨Ìï®</span>
            </div>
            
            <div style={{ marginTop: '4px' }}>
              <label style={{ 
                display: 'block', 
                fontSize: '11px', 
                color: '#6B7280', 
                marginBottom: '4px',
                textAlign: 'left'
              }}>
                Ïù¥ÎØ∏ÏßÄ Ï∫°ÏÖò:
              </label>
              <input
                type="text"
                value={safeImage.caption || ''}
                onChange={(e) => onCaptionChange(section, media, index, e.target.value)}
                placeholder="Ï∫°ÏÖòÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                style={{
                  width: '100%',
                  padding: '8px',
                  fontSize: '12px',
                  border: '2px solid #D1D5DB',
                  borderRadius: '6px',
                  backgroundColor: 'white',
                  outline: 'none',
                  boxSizing: 'border-box'
                }}
                onFocus={(e) => e.stopPropagation()}
                onKeyDown={(e) => e.stopPropagation()}
                onCompositionStart={(e) => e.stopPropagation()}
                onCompositionEnd={(e) => e.stopPropagation()}
                autoComplete="off"
              />
            </div>
          </div>
        ) : (
          <div 
            style={{ 
              height: '100%', 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: 'center', 
              justifyContent: 'center',
              cursor: disabled ? 'not-allowed' : 'pointer'
            }}
            onPaste={disabled ? null : (e) => onPaste(e, section, media, index)}
            tabIndex={disabled ? -1 : 0}
            onMouseOver={(e) => {
              if (!disabled) {
                e.currentTarget.style.borderColor = '#3B82F6';
              }
            }}
            onMouseOut={(e) => {
              if (!disabled) {
                e.currentTarget.style.borderColor = '#D1D5DB';
              }
            }}
          >
            <div style={{ fontSize: isLarge ? '40px' : '30px', marginBottom: '12px', opacity: 0.5 }}>üñºÔ∏è</div>
            <p style={{ fontSize: '14px', color: '#6B7280', margin: '4px 0', fontWeight: '500' }}>Ïù¥ÎØ∏ÏßÄ {index + 1}</p>
            <p style={{ fontSize: '12px', color: '#9CA3AF', margin: 0 }}>
              {disabled ? 'ÌäπÏù¥ÏÇ¨Ìï≠ ÏóÜÏùå' : 'Ctrl+VÎ°ú Î∂ôÏó¨ÎÑ£Í∏∞'}
            </p>
          </div>
        )}
      </div>
    );
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const weekDay = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'][date.getDay()];
    return `${month}/${day}(${weekDay})`;
  };

  const formatEmailDate = (dateString) => {
    const date = new Date(dateString);
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${month}${day}`;
  };

  const generateEmailContent = () => {
    const formattedDate = formatDate(reportData.date);
    const senderName = reportData.senderName || 'Î∞ïÌù¨Ïàò';
    
    let emailContent = `ÏïàÎÖïÌïòÏÑ∏Ïöî,\nÏóêÏΩîÎßàÏºÄÌåÖ ${senderName}ÏûÖÎãàÎã§.\n\n`;
    
    if (reportData.attachmentNote.trim()) {
      emailContent += `${reportData.attachmentNote}\n\n`;
    } else {
      emailContent += `Î¶¨Ìè¨Ìä∏Îäî Ïö©ÎüâÌÅ¨Í∏∞ ÏÉÅ ÎåÄÏö©Îüâ Ï≤®Î∂ÄÎ°ú Í≥µÏú†ÎìúÎ¶ΩÎãàÎã§.\n(ÎåÄÏö©Îüâ Ï≤®Î∂ÄÌååÏùº)\n\n`;
    }
    
    emailContent += `* DA ÌååÌä∏\n[Ï†ÑÏ≤¥]\n`;
    if (reportData.daOverall.totalBudget || reportData.daOverall.totalLeads || reportData.daOverall.totalCPA) {
      emailContent += `${formattedDate} Ï¥ù Í¥ëÍ≥†ÎπÑ ${reportData.daOverall.totalBudget} / Í∞ÄÎßùÏûêÏõê ${reportData.daOverall.totalLeads} / Í∞ÄÎßùCPA ${reportData.daOverall.totalCPA}\n\n`;
    }
    
    const mediaOrder = ['ÌÜ†Ïä§', 'ÎÑ§Ïù¥Î≤ÑGFA', 'ÎÑ§Ïù¥Î≤ÑNOSP', 'Ïπ¥Ïπ¥Ïò§', 'Íµ¨Í∏Ä', 'Î©îÌÉÄ', 'Ïï±Ï∫†ÌéòÏù∏'];
    const hasMediaContent = mediaOrder.some(media => reportData.mediaDetails[media]?.content?.trim());
    if (hasMediaContent) {
      emailContent += `[ÎØ∏ÎîîÏñ¥ ÏÉÅÏÑ∏]\n`;
      let mediaCount = 0;
      mediaOrder.forEach(media => {
        const data = reportData.mediaDetails[media];
        if (data?.content?.trim()) {
          mediaCount++;
          emailContent += `${mediaCount}. ${media}\n${data.content}\n\n`;
        }
      });
    }
    
    if (reportData.partnership.totalBudget || reportData.partnership.totalLeads || reportData.partnership.totalCPA || reportData.partnership.details?.trim()) {
      emailContent += `* Ï†úÌú¥ ÌååÌä∏\n`;
      
      if (reportData.partnership.totalBudget || reportData.partnership.totalLeads || reportData.partnership.totalCPA) {
        emailContent += `${formattedDate} Í¥ëÍ≥†ÎπÑ ${reportData.partnership.totalBudget} / Í∞ÄÎßùÏûêÏõê ${reportData.partnership.totalLeads} / Í∞ÄÎßù CPA ${reportData.partnership.totalCPA}\n\n`;
      }
      
      if (reportData.partnership.details?.trim()) {
        emailContent += `${reportData.partnership.details}\n\n`;
      }
    }
    
    if (reportData.partnership.weeklyPlan?.trim()) {
      emailContent += `[Í∏àÏ£º MKT ÌîåÎûú]\n${reportData.partnership.weeklyPlan}\n\n`;
    }
    
    emailContent += `Í∞êÏÇ¨Ìï©ÎãàÎã§.\n${senderName} ÎìúÎ¶º`;
    
    return emailContent;
  };

  const generateEmailWithImages = () => {
    const formattedDate = formatDate(reportData.date);
    const senderName = reportData.senderName || 'Î∞ïÌù¨Ïàò';
    
    const emailSections = [];
    
    emailSections.push({
      type: 'text',
      content: `ÏïàÎÖïÌïòÏÑ∏Ïöî,\nÏóêÏΩîÎßàÏºÄÌåÖ ${senderName}ÏûÖÎãàÎã§.\n\n`
    });
    
    if (reportData.attachmentNote.trim()) {
      emailSections.push({
        type: 'text',
        content: `${reportData.attachmentNote}\n\n`
      });
    } else {
      emailSections.push({
        type: 'text',
        content: `Î¶¨Ìè¨Ìä∏Îäî Ïö©ÎüâÌÅ¨Í∏∞ ÏÉÅ ÎåÄÏö©Îüâ Ï≤®Î∂ÄÎ°ú Í≥µÏú†ÎìúÎ¶ΩÎãàÎã§.\n(ÎåÄÏö©Îüâ Ï≤®Î∂ÄÌååÏùº)\n\n`
      });
    }
    
    emailSections.push({
      type: 'text',
      content: `* DA ÌååÌä∏\n[Ï†ÑÏ≤¥]\n`
    });
    
    if (reportData.daOverall.totalBudget || reportData.daOverall.totalLeads || reportData.daOverall.totalCPA) {
      emailSections.push({
        type: 'text',
        content: `${formattedDate} Ï¥ù Í¥ëÍ≥†ÎπÑ ${reportData.daOverall.totalBudget} / Í∞ÄÎßùÏûêÏõê ${reportData.daOverall.totalLeads} / Í∞ÄÎßùCPA ${reportData.daOverall.totalCPA}\n\n`
      });
    }
    
    if (reportData.daOverall.images && Array.isArray(reportData.daOverall.images)) {
      reportData.daOverall.images.forEach((image, index) => {
        if (image && image.src && image.includeInEmail) {
          if (image.caption && image.caption.trim()) {
            emailSections.push({
              type: 'text',
              content: `‚ñº ${image.caption}\n`
            });
          }
          emailSections.push({
            type: 'image',
            src: image.src,
            alt: `DA Ï†ÑÏ≤¥ ÏÑ±Í≥º ${index + 1}`
          });
        }
      });
    }
    
    const mediaOrder = ['ÌÜ†Ïä§', 'ÎÑ§Ïù¥Î≤ÑGFA', 'ÎÑ§Ïù¥Î≤ÑNOSP', 'Ïπ¥Ïπ¥Ïò§', 'Íµ¨Í∏Ä', 'Î©îÌÉÄ', 'Ïï±Ï∫†ÌéòÏù∏'];
    const hasMediaContent = mediaOrder.some(media => reportData.mediaDetails[media]?.content?.trim());
    
    if (hasMediaContent) {
      emailSections.push({
        type: 'text',
        content: `[ÎØ∏ÎîîÏñ¥ ÏÉÅÏÑ∏]\n`
      });
      
      let mediaCount = 0;
      mediaOrder.forEach(media => {
        const data = reportData.mediaDetails[media];
        if (data?.content?.trim()) {
          mediaCount++;
          emailSections.push({
            type: 'text',
            content: `${mediaCount}. ${media}\n${data.content}\n\n`
          });
          
          if (data.images && Array.isArray(data.images)) {
            data.images.forEach((image, index) => {
              if (image && image.src && image.includeInEmail) {
                if (image.caption && image.caption.trim()) {
                  emailSections.push({
                    type: 'text',
                    content: `‚ñº ${image.caption}\n`
                  });
                }
                emailSections.push({
                  type: 'image',
                  src: image.src,
                  alt: `${media} ÏÑ±Í≥º ${index + 1}`
                });
              }
            });
          }
        }
      });
    }
    
    if (reportData.partnership.totalBudget || reportData.partnership.totalLeads || reportData.partnership.totalCPA || reportData.partnership.details?.trim()) {
      emailSections.push({
        type: 'text',
        content: `* Ï†úÌú¥ ÌååÌä∏\n`
      });
      
      if (reportData.partnership.totalBudget || reportData.partnership.totalLeads || reportData.partnership.totalCPA) {
        emailSections.push({
          type: 'text',
          content: `${formattedDate} Í¥ëÍ≥†ÎπÑ ${reportData.partnership.totalBudget} / Í∞ÄÎßùÏûêÏõê ${reportData.partnership.totalLeads} / Í∞ÄÎßù CPA ${reportData.partnership.totalCPA}\n\n`
        });
      }
      
      if (reportData.partnership.details?.trim()) {
        emailSections.push({
          type: 'text',
          content: `${reportData.partnership.details}\n\n`
        });
      }
      
      if (reportData.partnership.images && Array.isArray(reportData.partnership.images)) {
        reportData.partnership.images.forEach((image, index) => {
          if (image && image.src && image.includeInEmail) {
            if (image.caption && image.caption.trim()) {
              emailSections.push({
                type: 'text',
                content: `‚ñº ${image.caption}\n`
              });
            }
            emailSections.push({
              type: 'image',
              src: image.src,
              alt: `Ï†úÌú¥ ÏÑ±Í≥º ${index + 1}`
            });
          }
        });
      }
    }
    
    if (reportData.partnership.weeklyPlan?.trim()) {
      emailSections.push({
        type: 'text',
        content: `[Í∏àÏ£º MKT ÌîåÎûú]\n${reportData.partnership.weeklyPlan}\n\n`
      });
    }
    
    emailSections.push({
      type: 'text',
      content: `Í∞êÏÇ¨Ìï©ÎãàÎã§.\n${senderName} ÎìúÎ¶º`
    });
    
    return emailSections;
  };

  useEffect(() => {
    const emailContent = generateEmailContent();
    setGeneratedEmail(emailContent);
  }, [reportData]);

  const copyEmailToClipboard = async () => {
    try {
      const emailDate = formatEmailDate(reportData.date);
      const subject = `[ÏóêÏΩî/Ïû•Í∏∞TM/DA] Î©îÎ¶¨Ï∏†ÌôîÏû¨ Îç∞ÏùºÎ¶¨Î≥¥Í≥†_25ÎÖÑ ${emailDate}`;
      const recipients = 'Î∞õÎäîÏÇ¨Îûå: Î∞ïÏòÅÎπàÎãò/TMÎßàÏºÄÌåÖÌååÌä∏ <yb.park@meritz.co.kr>';
      const cc = 'Ï∞∏Ï°∞: ÍπÄÏú§Ìù¨Îãò/TMÎßàÏºÄÌåÖÌååÌä∏ <yoonhee.k@meritz.co.kr>, Ïù¥ÏõêÏßÑ/Î¶¨Îçî/TMÎßàÏºÄÌåÖÌååÌä∏ <wonjin.lee@meritz.co.kr>, echo_Î©îÎ¶¨Ï∏†Îã§Ïù¥Î†âÌä∏ <echo_meritzdirect@echomarketing.co.kr>, ÎîîÌä∏ÎùºÏù¥Î∏å_ÌåÄÎ©îÏùº <meritz@dtribe.co.kr>';
      
      const fullEmail = `${subject}\n\n${recipients}\n${cc}\n\n${generatedEmail}`;
      
      await navigator.clipboard.writeText(fullEmail);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Î≥µÏÇ¨ Ïã§Ìå®:', err);
      alert('Î©îÏùº ÎÇ¥Ïö© Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const saveToGmailDrafts = () => {
    try {
      setIsGmailLoading(true);
      setGmailSaveError('');
      setGmailSaveSuccess(false);
      
      const emailDate = formatEmailDate(reportData.date);
      const subject = `[ÏóêÏΩî/Ïû•Í∏∞TM/DA] Î©îÎ¶¨Ï∏†ÌôîÏû¨ Îç∞ÏùºÎ¶¨Î≥¥Í≥†_25ÎÖÑ ${emailDate}`;
      const toEmail = 'yb.park@meritz.co.kr';
      const ccEmails = 'yoonhee.k@meritz.co.kr,wonjin.lee@meritz.co.kr,echo_meritzdirect@echomarketing.co.kr,meritz@dtribe.co.kr';
      
      const gmailUrl = `https://mail.google.com/mail/u/0/?fs=1&tf=cm` +
        `&su=${encodeURIComponent(subject)}` +
        `&to=${encodeURIComponent(toEmail)}` +
        `&cc=${encodeURIComponent(ccEmails)}` +
        `&body=${encodeURIComponent(generatedEmail)}`;
      
      window.open(gmailUrl, '_blank');
      
      setGmailSaveSuccess(true);
      setTimeout(() => setGmailSaveSuccess(false), 3000);
      
    } catch (error) {
      console.error('Gmail Ï†ÄÏû• Ïã§Ìå®:', error);
      setGmailSaveError(`Gmail Ï†ÄÏû• Ïã§Ìå®: ${error.message}`);
      setTimeout(() => setGmailSaveError(''), 5000);
    } finally {
      setIsGmailLoading(false);
    }
  };

  // üõ°Ô∏è ÏßÑÏßú ÏïàÏ†ÑÌïú ÏàòÎèô Ï†ÄÏû• Ìï®Ïàò
  const saveCurrentData = async () => {
    let section;
    if (currentMedia === 'DAÏ†ÑÏ≤¥') {
      section = 'daOverall';
    } else if (currentMedia === 'Ï†úÌú¥') {
      section = 'partnership';
    } else if (currentMedia && currentMedia !== 'ÎØ∏Î¶¨Î≥¥Í∏∞') {
      section = `media_${currentMedia}`;
    } else {
      // Î©îÏù∏ ÌôîÎ©¥ÏóêÏÑúÏùò Ï†ÑÏ≤¥ Ï†ÄÏû•
      try {
        setIsLoading(true);
        const result = await saveToFirebase(reportData.date, reportData);
        if (result) {
          setSaveSuccess(true);
          setTimeout(() => setSaveSuccess(false), 3000);
          const reports = await getAllReports();
          setAllReports(reports);
        } else {
          alert('Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        }
      } catch (error) {
        console.error('Ï†ÑÏ≤¥ Ï†ÄÏû• Ïã§Ìå®:', error);
        alert('Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      } finally {
        setIsLoading(false);
      }
      return;
    }
    
    try {
      setIsLoading(true);
      console.log(`üõ°Ô∏è ÏàòÎèô Ï†ÄÏû• ÏãúÏûë: ${section} (Îã§Î•∏ ÏÑπÏÖòÏùÄ Î≥¥Ï°¥)`);
      
      const result = await realSafeSaveToFirebase(reportData.date, reportData, section, reportData.senderName);
      if (result.success) {
        setSmartSaveSuccess(true);
        setLastSavedSection(section);
        setTimeout(() => {
          setSmartSaveSuccess(false);
          setLastSavedSection('');
        }, 3000);
        
        console.log('‚úÖ ÏàòÎèô Ï†ÄÏû• ÏÑ±Í≥µ - Îã§Î•∏ ÌåÄÏõê Îç∞Ïù¥ÌÑ∞ Î≥¥Ï°¥Îê®');
      } else {
        console.error('‚ùå ÏàòÎèô Ï†ÄÏû• Ïã§Ìå®:', result.error);
        alert('Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      }
    } catch (error) {
      console.error('Ï†ÄÏû• Ï§ë Ïò§Î•ò:', error);
      alert('Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  const archiveData = async () => {
    const success = await saveToFirebase(reportData.date, reportData);
    if (success) {
      setArchiveSuccess(true);
      setTimeout(() => setArchiveSuccess(false), 2000);
      const reports = await getAllReports();
      setAllReports(reports);
    }
  };

  const resetCurrentData = () => {
    setShowResetConfirm(true);
  };

  const confirmReset = async () => {
    const emptyData = {
      date: reportData.date,
      senderName: reportData.senderName,
      daOverall: {
        totalBudget: '',
        totalLeads: '',
        totalCPA: '',
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ]
      },
      mediaDetails: {
        'ÌÜ†Ïä§': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'ÎÑ§Ïù¥Î≤ÑGFA': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'ÎÑ§Ïù¥Î≤ÑNOSP': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Ïπ¥Ïπ¥Ïò§': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Íµ¨Í∏Ä': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Î©îÌÉÄ': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        },
        'Ïï±Ï∫†ÌéòÏù∏': { 
          content: '', 
          images: [
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' },
            { src: null, includeInEmail: false, caption: '' }
          ], 
          noUpdate: false 
        }
      },
      partnership: {
        totalBudget: '',
        totalLeads: '',
        totalCPA: '',
        details: '',
        images: [
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' },
          { src: null, includeInEmail: false, caption: '' }
        ],
        weeklyPlan: ''
      },
      attachmentNote: ''
    };
    
    setReportData(emptyData);
    await saveToFirebase(reportData.date, emptyData);
    setShowResetConfirm(false);
    setResetSuccess(true);
    setTimeout(() => setResetSuccess(false), 2000);
  };

  const cancelReset = () => {
    setShowResetConfirm(false);
  };

  const loadArchivedData = async (date) => {
    try {
      setIsLoading(true);
      const data = await loadFromFirebase(date);
      const migratedData = migrateDataStructure(data);
      
      if (migratedData) {
        setReportData({ ...migratedData, date });
        setLastUpdatedBy(migratedData.lastUpdatedBy || '');
        setShowArchive(false);
        setShowTeamView(false);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('ÏïÑÏπ¥Ïù¥Î∏å Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
      setIsLoading(false);
    }
  };

  const getCompletionStatus = () => {
    const status = {};
    
    status['DAÏ†ÑÏ≤¥'] = !!(reportData.daOverall.totalBudget || reportData.daOverall.totalLeads || reportData.daOverall.totalCPA);
    
    Object.keys(reportData.mediaDetails).forEach(media => {
      const mediaData = reportData.mediaDetails[media];
      if (mediaData && mediaData.noUpdate) {
        status[media] = 'noUpdate';
      } else if (mediaData && mediaData.content?.trim()) {
        status[media] = 'completed';
      } else {
        status[media] = 'incomplete';
      }
    });
    
    status['Ï†úÌú¥'] = !!(reportData.partnership.totalBudget || reportData.partnership.totalLeads || reportData.partnership.totalCPA || reportData.partnership.details?.trim());
    
    return status;
  };

  if (showArchive) {
    return (
      <div style={styles.container}>
        <div style={styles.mainCard}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <button
                onClick={() => setShowArchive(false)}
                style={{
                  ...styles.button,
                  backgroundColor: '#F3F4F6',
                  color: '#374151',
                  padding: '8px 12px',
                  marginRight: '16px'
                }}
              >
                ‚Üê
              </button>
              <h1 style={{ fontSize: '24px', fontWeight: 'bold', color: '#1F2937', margin: 0 }}>Í≥ºÍ±∞ Î¶¨Ìè¨Ìä∏</h1>
            </div>
          </div>
          
          {isLoading ? (
            <div style={{ textAlign: 'center', padding: '48px 0' }}>
              <div style={{ 
                width: '32px', 
                height: '32px', 
                border: '3px solid #3B82F6', 
                borderTop: '3px solid transparent', 
                borderRadius: '50%', 
                animation: 'spin 1s linear infinite',
                margin: '0 auto 16px'
              }}></div>
              <p style={{ color: '#6B7280', fontSize: '16px' }}>Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
          ) : allReports.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '48px 0' }}>
              <div style={{ fontSize: '64px', marginBottom: '16px' }}>üìÅ</div>
              <p style={{ color: '#6B7280', fontSize: '16px' }}>Ï†ÄÏû•Îêú Î¶¨Ìè¨Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.</p>
            </div>
          ) : (
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px' }}>
              {allReports.map(report => (
                <button
                  key={report.id}
                  onClick={() => loadArchivedData(report.date)}
                  style={{
                    padding: '16px',
                    backgroundColor: '#EFF6FF',
                    border: '2px solid #BFDBFE',
                    borderRadius: '12px',
                    textAlign: 'left',
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onMouseOver={(e) => {
                    e.target.style.backgroundColor = '#DBEAFE';
                    e.target.style.borderColor = '#93C5FD';
                  }}
                  onMouseOut={(e) => {
                    e.target.style.backgroundColor = '#EFF6FF';
                    e.target.style.borderColor = '#BFDBFE';
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                    <div>
                      <div style={{ fontWeight: '600', color: '#1E40AF', fontSize: '16px' }}>
                        {formatDate(report.date)}
                      </div>
                      <div style={{ fontSize: '14px', color: '#3B82F6' }}>
                        {report.senderName}
                      </div>
                      <div style={{ fontSize: '12px', color: '#6B7280' }}>
                        {report.lastUpdatedBy && `ÏµúÏ¢Ö ÏàòÏ†ï: ${report.lastUpdatedBy}`}
                      </div>
                    </div>
                    <div style={{ fontSize: '24px' }}>üìÖ</div>
                  </div>
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  }

  if (!currentMedia) {
    const completionStatus = getCompletionStatus();
    const completedCount = Object.values(completionStatus).filter(status => status === 'completed' || status === 'noUpdate' || status === true).length;
    
    return (
      <div style={styles.container}>
        <div style={styles.mainCard}>
          <div style={styles.statusCard}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <div style={{ 
                  width: '12px', 
                  height: '12px', 
                  borderRadius: '50%', 
                  backgroundColor: '#10B981',
                  marginRight: '8px'
                }}></div>
                <span style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                  üõ°Ô∏è ÏßÑÏßú ÏïàÏ†ÑÌïú ÏÑπÏÖòÎ≥Ñ Î≥ëÌï©
                </span>
                <span style={{ fontSize: '12px', color: '#6B7280', marginLeft: '8px' }}>
                  (AÍ∞Ä ÌÜ†Ïä§ Ïì∞Í≥†, BÍ∞Ä Íµ¨Í∏Ä Ïç®ÎèÑ ÏÑúÎ°ú Ïïà ÎÇ†ÏïÑÍ∞ê!)
                </span>
                {syncSuccess && (
                  <span style={{ fontSize: '12px', color: '#10B981', marginLeft: '8px' }}>‚úÖ ÌåÄÏõê Îç∞Ïù¥ÌÑ∞ Î≥¥Ï°¥Îê®</span>
                )}
                {smartSaveSuccess && (
                  <span style={{ fontSize: '12px', color: '#10B981', marginLeft: '8px' }}>‚úÖ ÏïàÏ†Ñ Ï†ÄÏû• ÏôÑÎ£å</span>
                )}
                {lastUpdatedBy && (
                  <span style={{ fontSize: '12px', color: '#6B7280', marginLeft: '8px' }}>
                    ÎßàÏßÄÎßâ ÏàòÏ†ï: {lastUpdatedBy}
                  </span>
                )}
              </div>
            </div>
          </div>

          <div style={{ textAlign: 'center', marginBottom: '32px' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '16px' }}>
              <span style={{ fontSize: '48px', marginRight: '16px' }}>üë•</span>
              <h1 style={styles.title}>Î©îÎ¶¨Ï∏†ÌôîÏû¨ Ï∫†ÌéòÏù∏</h1>
            </div>
            <h2 style={styles.subtitle}>Îç∞ÏùºÎ¶¨ Î¶¨Ìè¨Ìä∏ ÌîåÎû´Ìèº</h2>
            
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '32px', marginBottom: '24px', flexWrap: 'wrap' }}>
              <div style={styles.inputGroup}>
                <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>Î¶¨Ìè¨Ìä∏ ÎÇ†Ïßú:</label>
                <input
                  type="date"
                  value={reportData.date}
                  onChange={(e) => handleDateChange(e.target.value)}
                  style={styles.input}
                  disabled={isLoading}
                />
                <span style={{ fontSize: '14px', color: '#6B7280' }}>({formatDate(reportData.date)})</span>
              </div>
              
              <div style={styles.inputGroup}>
                <label style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>Î≥¥ÎÇ¥Îäî ÏÇ¨Îûå:</label>
                <input
                  type="text"
                  value={reportData.senderName || ''}
                  onChange={(e) => setReportData(prev => ({ ...prev, senderName: e.target.value }))}
                  style={{ ...styles.input, width: '100px' }}
                  placeholder="Î∞ïÌù¨Ïàò"
                  disabled={isLoading}
                />
                <span style={{ fontSize: '14px', color: '#6B7280' }}>Îãò</span>
              </div>
            </div>
            
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '16px' }}>
              <div style={{ fontSize: '14px', color: '#6B7280' }}>
                ÏûëÏÑ± ÏôÑÎ£å: {completedCount}/9
              </div>
              {isLoading && (
                <div style={{ display: 'flex', alignItems: 'center', fontSize: '14px', color: '#3B82F6' }}>
                  <div style={{ 
                    width: '16px', 
                    height: '16px', 
                    border: '2px solid #3B82F6', 
                    borderTop: '2px solid transparent', 
                    borderRadius: '50%', 
                    animation: 'spin 1s linear infinite',
                    marginRight: '8px'
                  }}></div>
                  Î∂àÎü¨Ïò§Îäî Ï§ë...
                </div>
              )}
            </div>
          </div>
          
          <div style={styles.mediaGrid}>
            {mediaList.map(media => {
              const status = completionStatus[media.id];
              let buttonStyle = { ...styles.mediaButton };
              let statusText = 'ÎØ∏ÏûëÏÑ±';
              let statusBadge = null;
              
              if (status === 'completed' || status === true) {
                buttonStyle = { 
                  ...styles.mediaButton, 
                  borderColor: '#10B981', 
                  backgroundColor: '#F0FDF4'
                };
                statusText = 'ÏûëÏÑ± ÏôÑÎ£å';
                statusBadge = (
                  <div style={{ ...styles.statusBadge, backgroundColor: '#10B981' }}>
                    ‚úì
                  </div>
                );
              } else if (status === 'noUpdate') {
                buttonStyle = { 
                  ...styles.mediaButton, 
                  borderColor: '#F59E0B', 
                  backgroundColor: '#FFFBEB'
                };
                statusText = 'ÌäπÏù¥ÏÇ¨Ìï≠ ÏóÜÏùå';
                statusBadge = (
                  <div style={{ ...styles.statusBadge, backgroundColor: '#F59E0B' }}>
                    -
                  </div>
                );
              }
              
              return (
                <button
                  key={media.id}
                  onClick={() => setCurrentMedia(media.id)}
                  style={buttonStyle}
                  disabled={isLoading}
                  onMouseOver={(e) => {
                    if (!isLoading) {
                      e.target.style.transform = 'translateY(-2px)';
                      e.target.style.boxShadow = '0 10px 25px -5px rgba(0, 0, 0, 0.1)';
                    }
                  }}
                  onMouseOut={(e) => {
                    e.target.style.transform = 'translateY(0)';
                    e.target.style.boxShadow = 'none';
                  }}
                >
                  <div style={styles.mediaIcon}>
                    {media.icon}
                  </div>
                  <div style={styles.mediaName}>{media.name}</div>
                  <div style={styles.mediaStatus}>{statusText}</div>
                  {statusBadge}
                </button>
              );
            })}
          </div>

          <div style={styles.actionGrid}>
            <button
              onClick={() => setCurrentMedia('ÎØ∏Î¶¨Î≥¥Í∏∞')}
              style={{ 
                ...styles.button, 
                backgroundColor: '#3B82F6', 
                color: 'white',
                justifyContent: 'center'
              }}
              disabled={isLoading}
            >
              <span>üëÅÔ∏è</span>
              Ï†ÑÏ≤¥ ÎØ∏Î¶¨Î≥¥Í∏∞
            </button>
            <button
              onClick={saveCurrentData}
              style={{ 
                ...styles.button, 
                backgroundColor: saveSuccess ? '#10B981' : '#22C55E', 
                color: 'white',
                justifyContent: 'center'
              }}
              disabled={isLoading}
            >
              <span>üíæ</span>
              {saveSuccess ? 'Ï†ÄÏû• ÏôÑÎ£å!' : 'Ï†ÑÏ≤¥ Ï†ÄÏû•ÌïòÍ∏∞'}
            </button>
            <button
              onClick={() => setShowArchive(true)}
              style={{ 
                ...styles.button, 
                backgroundColor: '#6B7280', 
                color: 'white',
                justifyContent: 'center'
              }}
              disabled={isLoading}
            >
              <span>üìÖ</span>
              Í≥ºÍ±∞ Î¶¨Ìè¨Ìä∏
            </button>
            <button
              onClick={() => setShowResetConfirm(true)}
              style={{ 
                ...styles.button, 
                backgroundColor: resetSuccess ? '#10B981' : '#EF4444', 
                color: 'white',
                justifyContent: 'center'
              }}
              disabled={isLoading}
            >
              <span>üîÑ</span>
              {resetSuccess ? 'Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!' : 'Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî'}
            </button>
          </div>
          
          {showResetConfirm && (
            <div style={styles.modal}>
              <div style={styles.modalContent}>
                <div style={{ textAlign: 'center' }}>
                  <div style={{ fontSize: '64px', marginBottom: '16px' }}>üîÑ</div>
                  <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#1F2937', marginBottom: '8px' }}>Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî</h3>
                  <p style={{ color: '#6B7280', marginBottom: '24px', lineHeight: '1.5' }}>
                    {formatDate(reportData.date)} Î™®Îì† Ï†ïÎ≥¥Î•º Ï¥àÍ∏∞ÌôîÌï†ÍπåÏöî?
                    <br />
                    <span style={{ color: '#EF4444', fontWeight: '500' }}>Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎ©∞, Î™®Îì† ÌåÄÏõêÏóêÍ≤å ÏòÅÌñ•ÏùÑ Ï§çÎãàÎã§.</span>
                  </p>
                  <div style={{ display: 'flex', gap: '16px', justifyContent: 'center' }}>
                    <button
                      onClick={cancelReset}
                      style={{
                        ...styles.button,
                        backgroundColor: '#D1D5DB',
                        color: '#374151'
                      }}
                    >
                      Ï∑®ÏÜå
                    </button>
                    <button
                      onClick={confirmReset}
                      style={{
                        ...styles.button,
                        backgroundColor: '#EF4444',
                        color: 'white'
                      }}
                    >
                      ÌôïÏù∏
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  if (currentMedia === 'ÎØ∏Î¶¨Î≥¥Í∏∞') {
    const emailSections = generateEmailWithImages();

    return (
      <div style={styles.container}>
        <div style={styles.mainCard}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <button
                onClick={() => setCurrentMedia('')}
                style={{
                  ...styles.button,
                  backgroundColor: '#F3F4F6',
                  color: '#374151',
                  padding: '8px 12px',
                  marginRight: '16px'
                }}
              >
                ‚Üê
              </button>
              <h1 style={{ fontSize: '24px', fontWeight: 'bold', color: '#1F2937', margin: 0 }}>Î©îÏùº ÎØ∏Î¶¨Î≥¥Í∏∞</h1>
            </div>
            <div style={{ display: 'flex', gap: '12px' }}>
              <button
                onClick={saveToGmailDrafts}
                disabled={isGmailLoading}
                style={{
                  ...styles.button,
                  backgroundColor: gmailSaveSuccess ? '#10B981' : isGmailLoading ? '#9CA3AF' : '#DC2626',
                  color: 'white',
                  cursor: isGmailLoading ? 'not-allowed' : 'pointer'
                }}
              >
                {isGmailLoading ? (
                  <>
                    <div style={{ 
                      width: '16px', 
                      height: '16px', 
                      border: '2px solid white', 
                      borderTop: '2px solid transparent', 
                      borderRadius: '50%', 
                      animation: 'spin 1s linear infinite'
                    }}></div>
                    Ï≤òÎ¶¨Ï§ë...
                  </>
                ) : gmailSaveSuccess ? (
                  <>
                    <span>‚úÖ</span>
                    Gmail Ïó¥Î¶º!
                  </>
                ) : (
                  <>
                    <span>üìß</span>
                    Gmail ÏûÑÏãúÎ≥¥Í¥ÄÌï®
                  </>
                )}
              </button>
              <button
                onClick={copyEmailToClipboard}
                style={{
                  ...styles.button,
                  backgroundColor: copySuccess ? '#10B981' : '#3B82F6',
                  color: 'white'
                }}
              >
                <span>{copySuccess ? '‚úÖ' : 'üìã'}</span>
                {copySuccess ? 'Î≥µÏÇ¨Îê®!' : 'Î≥µÏÇ¨'}
              </button>
            </div>
          </div>
          
          <div style={{ backgroundColor: '#F9FAFB', padding: '24px', borderRadius: '12px', border: '1px solid #E5E7EB' }}>
            <div style={{ marginBottom: '16px', padding: '16px', backgroundColor: '#DBEAFE', borderRadius: '8px' }}>
              <p style={{ fontSize: '14px', color: '#1E40AF', margin: '4px 0' }}>
                <strong>Î∞õÎäîÏÇ¨Îûå:</strong> Î∞ïÏòÅÎπàÎãò/TMÎßàÏºÄÌåÖÌååÌä∏ &lt;yb.park@meritz.co.kr&gt;
              </p>
              <p style={{ fontSize: '14px', color: '#1E40AF', margin: '4px 0' }}>
                <strong>Ï∞∏Ï°∞:</strong> ÍπÄÏú§Ìù¨Îãò/TMÎßàÏºÄÌåÖÌååÌä∏, Ïù¥ÏõêÏßÑ/Î¶¨Îçî/TMÎßàÏºÄÌåÖÌååÌä∏, echo_Î©îÎ¶¨Ï∏†Îã§Ïù¥Î†âÌä∏, ÎîîÌä∏ÎùºÏù¥Î∏å_ÌåÄÎ©îÏùº
              </p>
              <p style={{ fontSize: '14px', color: '#1E40AF', margin: '4px 0' }}>
                <strong>Ï†úÎ™©:</strong> [ÏóêÏΩî/Ïû•Í∏∞TM/DA] Î©îÎ¶¨Ï∏†ÌôîÏû¨ Îç∞ÏùºÎ¶¨Î≥¥Í≥†_25ÎÖÑ {formatEmailDate(reportData.date)}
              </p>
            </div>
            
            <div style={{ 
              backgroundColor: 'white',
              padding: '20px',
              borderRadius: '8px',
              border: '1px solid #E5E7EB'
            }}>
              {emailSections.map((section, index) => (
                <div key={index}>
                  {section.type === 'text' ? (
                    <div style={{ 
                      whiteSpace: 'pre-wrap',
                      fontSize: '14px',
                      color: '#1F2937',
                      fontFamily: 'Consolas, Monaco, "Courier New", monospace',
                      lineHeight: '1.5',
                      marginBottom: '8px',
                      fontWeight: (
                        section.content.includes('* DA ÌååÌä∏') ||
                        section.content.includes('[Ï†ÑÏ≤¥]') ||
                        section.content.includes('[ÎØ∏ÎîîÏñ¥ ÏÉÅÏÑ∏]') ||
                        section.content.includes('[Í∏àÏ£º MKT ÌîåÎûú]') ||
                        /^\d+\.\s[Í∞Ä-Ìû£]+\n/.test(section.content)
                      ) ? 'bold' : 'normal'
                    }}>
                      {/^\d+\.\s[Í∞Ä-Ìû£]+\n/.test(section.content) ? (
                        <span>
                          <span style={{ fontWeight: 'bold' }}>
                            {section.content.split('\n')[0]}
                          </span>
                          <br />
                          <span style={{ fontWeight: 'normal' }}>
                            {section.content.split('\n').slice(1).join('\n')}
                          </span>
                        </span>
                      ) : (
                        section.content
                      )}
                    </div>
                  ) : (
                    <div style={{ 
                      textAlign: 'center',
                      margin: '16px 0'
                    }}>
                      <img 
                        src={section.src} 
                        alt={section.alt}
                        style={{
                          maxWidth: '100%',
                          height: 'auto',
                          maxHeight: '300px',
                          borderRadius: '4px'
                        }}
                      />
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
          
          <div style={{ 
            backgroundColor: '#FEF3C7', 
            padding: '16px', 
            borderRadius: '8px',
            border: '1px solid #F59E0B',
            marginTop: '16px'
          }}>
            <p style={{ fontSize: '14px', color: '#92400E', margin: 0 }}>
              üí° <strong>Gmail ÏÇ¨Ïö©Î≤ï:</strong> Gmail Ïó¥Í∏∞ ‚Üí ÌÖçÏä§Ìä∏ ÏûêÎèô ÏûÖÎ†•Îê® ‚Üí ÌïÑÏöîÌïú Ïù¥ÎØ∏ÏßÄÎ•º ÏàòÎèôÏúºÎ°ú Î∂ôÏó¨ÎÑ£Í∏∞ (Ctrl+V)
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      <div style={styles.mainCard}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <button
              onClick={() => setCurrentMedia('')}
              style={{
                ...styles.button,
                backgroundColor: '#F3F4F6',
                color: '#374151',
                padding: '8px 12px',
                marginRight: '16px'
              }}
            >
              ‚Üê
            </button>
            <h1 style={{ fontSize: '24px', fontWeight: 'bold', color: '#1F2937', margin: 0 }}>
              {mediaList.find(m => m.id === currentMedia)?.name} ÏûëÏÑ±
            </h1>
          </div>
          <button
            onClick={saveCurrentData}
            style={{
              ...styles.button,
              backgroundColor: smartSaveSuccess ? '#10B981' : '#3B82F6',
              color: 'white'
            }}
            disabled={isLoading}
          >
            <span>üõ°Ô∏è</span>
            {smartSaveSuccess ? 'ÏïàÏ†Ñ Ï†ÄÏû•Îê®!' : 'ÏïàÏ†Ñ Ï†ÄÏû•'}
          </button>
        </div>

        {currentMedia === 'DAÏ†ÑÏ≤¥' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px' }}>
              <div>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Ï¥ù Í¥ëÍ≥†ÎπÑ</label>
                <input
                  type="text"
                  value={reportData.daOverall.totalBudget}
                  onChange={(e) => setReportData(prev => ({
                    ...prev,
                    daOverall: { ...prev.daOverall, totalBudget: e.target.value }
                  }))}
                  placeholder="Ïòà: 7,829ÎßåÏõê"
                  style={{ ...styles.input, width: '100%' }}
                />
              </div>
              <div>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Í∞ÄÎßùÏûêÏõê</label>
                <input
                  type="text"
                  value={reportData.daOverall.totalLeads}
                  onChange={(e) => setReportData(prev => ({
                    ...prev,
                    daOverall: { ...prev.daOverall, totalLeads: e.target.value }
                  }))}
                  placeholder="Ïòà: 2,527Í±¥"
                  style={{ ...styles.input, width: '100%' }}
                />
              </div>
              <div>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Í∞ÄÎßùCPA</label>
                <input
                  type="text"
                  value={reportData.daOverall.totalCPA}
                  onChange={(e) => setReportData(prev => ({
                    ...prev,
                    daOverall: { ...prev.daOverall, totalCPA: e.target.value }
                  }))}
                  placeholder="Ïòà: 3ÎßåÏõê"
                  style={{ ...styles.input, width: '100%' }}
                />
              </div>
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '16px' }}>ÏÑ±Í≥º Ïù¥ÎØ∏ÏßÄ (ÏµúÎåÄ 4Ïû•)</label>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: '16px' }}>
                  <ImageUploadSlot
                    image={reportData.daOverall.images && reportData.daOverall.images[0]}
                    onDelete={handleImageDelete}
                    onCheckboxChange={handleCheckboxChange}
                    onCaptionChange={handleCaptionChange}
                    onPaste={handleImagePaste}
                    section="daOverall"
                    media={null}
                    index={0}
                    isLarge={true}
                  />
                </div>
                
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px' }}>
                  {[1, 2, 3].map(index => (
                    <ImageUploadSlot
                      key={index}
                      image={reportData.daOverall.images && reportData.daOverall.images[index]}
                      onDelete={handleImageDelete}
                      onCheckboxChange={handleCheckboxChange}
                      onCaptionChange={handleCaptionChange}
                      onPaste={handleImagePaste}
                      section="daOverall"
                      media={null}
                      index={index}
                      isLarge={false}
                    />
                  ))}
                </div>
              </div>
            </div>

            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Ï≤®Î∂ÄÌååÏùº ÏïàÎÇ¥ (ÏÑ†ÌÉùÏÇ¨Ìï≠)</label>
              <textarea
                value={reportData.attachmentNote}
                onChange={(e) => setReportData(prev => ({ ...prev, attachmentNote: e.target.value }))}
                placeholder="Í∏∞Î≥∏Í∞í: Î¶¨Ìè¨Ìä∏Îäî Ïö©ÎüâÌÅ¨Í∏∞ ÏÉÅ ÎåÄÏö©Îüâ Ï≤®Î∂ÄÎ°ú Í≥µÏú†ÎìúÎ¶ΩÎãàÎã§."
                style={{ 
                  ...styles.input, 
                  width: '100%', 
                  height: '100px', 
                  resize: 'vertical',
                  fontFamily: 'inherit'
                }}
              />
            </div>
          </div>
        )}

        {currentMedia !== 'DAÏ†ÑÏ≤¥' && currentMedia !== 'Ï†úÌú¥' && currentMedia !== 'ÎØ∏Î¶¨Î≥¥Í∏∞' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
              <input
                type="checkbox"
                id="noUpdate"
                checked={reportData.mediaDetails[currentMedia]?.noUpdate || false}
                onChange={(e) => setReportData(prev => ({
                  ...prev,
                  mediaDetails: {
                    ...prev.mediaDetails,
                    [currentMedia]: { 
                      ...prev.mediaDetails[currentMedia], 
                      noUpdate: e.target.checked,
                      content: e.target.checked ? '' : prev.mediaDetails[currentMedia]?.content || ''
                    }
                  }
                }))}
                style={{ marginRight: '8px', width: '16px', height: '16px' }}
              />
              <label htmlFor="noUpdate" style={{ fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                ÌäπÏù¥ÏÇ¨Ìï≠ ÏóÜÏùå (ÌôïÏù∏ ÏôÑÎ£å)
              </label>
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Îß§Ï≤¥ ÏΩîÎ©òÌä∏</label>
              <textarea
                value={reportData.mediaDetails[currentMedia]?.content || ''}
                onChange={(e) => setReportData(prev => ({
                  ...prev,
                  mediaDetails: {
                    ...prev.mediaDetails,
                    [currentMedia]: { 
                      ...prev.mediaDetails[currentMedia], 
                      content: e.target.value,
                      noUpdate: false
                    }
                  }
                }))}
                placeholder={`${currentMedia} ÏΩîÎ©òÌä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...`}
                style={{ 
                  ...styles.input, 
                  width: '100%', 
                  height: '200px', 
                  resize: 'vertical',
                  backgroundColor: reportData.mediaDetails[currentMedia]?.noUpdate ? '#F9FAFB' : 'white',
                  fontFamily: 'inherit'
                }}
                disabled={reportData.mediaDetails[currentMedia]?.noUpdate}
              />
              {reportData.mediaDetails[currentMedia]?.noUpdate && (
                <p style={{ fontSize: '14px', color: '#D97706', marginTop: '8px' }}>
                  ‚úì ÌäπÏù¥ÏÇ¨Ìï≠ ÏóÜÏùåÏúºÎ°ú ÏÑ§Ï†ïÎê®. Ï≤¥ÌÅ¨Î•º Ìï¥Ï†úÌïòÎ©¥ ÏΩîÎ©òÌä∏Î•º ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                </p>
              )}
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '16px' }}>Îß§Ï≤¥ Ïù¥ÎØ∏ÏßÄ (ÏµúÎåÄ 4Ïû•)</label>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: '16px' }}>
                  <ImageUploadSlot
                    image={reportData.mediaDetails[currentMedia]?.images && reportData.mediaDetails[currentMedia].images[0]}
                    onDelete={handleImageDelete}
                    onCheckboxChange={handleCheckboxChange}
                    onCaptionChange={handleCaptionChange}
                    onPaste={handleImagePaste}
                    section="mediaDetails"
                    media={currentMedia}
                    index={0}
                    isLarge={true}
                    disabled={reportData.mediaDetails[currentMedia]?.noUpdate}
                  />
                </div>
                
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px' }}>
                  {[1, 2, 3].map(index => (
                    <ImageUploadSlot
                      key={index}
                      image={reportData.mediaDetails[currentMedia]?.images && reportData.mediaDetails[currentMedia].images[index]}
                      onDelete={handleImageDelete}
                      onCheckboxChange={handleCheckboxChange}
                      onCaptionChange={handleCaptionChange}
                      onPaste={handleImagePaste}
                      section="mediaDetails"
                      media={currentMedia}
                      index={index}
                      isLarge={false}
                      disabled={reportData.mediaDetails[currentMedia]?.noUpdate}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {currentMedia === 'Ï†úÌú¥' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px' }}>
              <div>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Ï¥ù Í¥ëÍ≥†ÎπÑ</label>
                <input
                  type="text"
                  value={reportData.partnership.totalBudget}
                  onChange={(e) => setReportData(prev => ({
                    ...prev,
                    partnership: { ...prev.partnership, totalBudget: e.target.value }
                  }))}
                  placeholder="Ïòà: 2,642ÎßåÏõê"
                  style={{ ...styles.input, width: '100%' }}
                />
              </div>
              <div>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Í∞ÄÎßùÏûêÏõê</label>
                <input
                  type="text"
                  value={reportData.partnership.totalLeads}
                  onChange={(e) => setReportData(prev => ({
                    ...prev,
                    partnership: { ...prev.partnership, totalLeads: e.target.value }
                  }))}
                  placeholder="Ïòà: 1,279Í±¥"
                  style={{ ...styles.input, width: '100%' }}
                />
              </div>
              <div>
                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Í∞ÄÎßùCPA</label>
                <input
                  type="text"
                  value={reportData.partnership.totalCPA}
                  onChange={(e) => setReportData(prev => ({
                    ...prev,
                    partnership: { ...prev.partnership, totalCPA: e.target.value }
                  }))}
                  placeholder="Ïòà: 1.9ÎßåÏõê"
                  style={{ ...styles.input, width: '100%' }}
                />
              </div>
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Ï†úÌú¥ ÏÉÅÏÑ∏ ÎÇ¥Ïö©</label>
              <textarea
                value={reportData.partnership.details}
                onChange={(e) => setReportData(prev => ({
                  ...prev,
                  partnership: { ...prev.partnership, details: e.target.value }
                }))}
                placeholder="Ï†úÌú¥ ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                style={{ 
                  ...styles.input, 
                  width: '100%', 
                  height: '200px', 
                  resize: 'vertical',
                  fontFamily: 'inherit'
                }}
              />
            </div>

            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '8px' }}>Í∏àÏ£º MKT ÌîåÎûú</label>
              <textarea
                value={reportData.partnership.weeklyPlan}
                onChange={(e) => setReportData(prev => ({
                  ...prev,
                  partnership: { ...prev.partnership, weeklyPlan: e.target.value }
                }))}
                placeholder="Í∏àÏ£º ÎßàÏºÄÌåÖ Í≥ÑÌöçÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                style={{ 
                  ...styles.input, 
                  width: '100%', 
                  height: '120px', 
                  resize: 'vertical',
                  fontFamily: 'inherit'
                }}
              />
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '16px' }}>Ï†úÌú¥ Ïù¥ÎØ∏ÏßÄ (ÏµúÎåÄ 4Ïû•)</label>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: '16px' }}>
                  <ImageUploadSlot
                    image={reportData.partnership.images && reportData.partnership.images[0]}
                    onDelete={handleImageDelete}
                    onCheckboxChange={handleCheckboxChange}
                    onCaptionChange={handleCaptionChange}
                    onPaste={handleImagePaste}
                    section="partnership"
                    media={null}
                    index={0}
                    isLarge={true}
                  />
                </div>
                
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px' }}>
                  {[1, 2, 3].map(index => (
                    <ImageUploadSlot
                      key={index}
                      image={reportData.partnership.images && reportData.partnership.images[index]}
                      onDelete={handleImageDelete}
                      onCheckboxChange={handleCheckboxChange}
                      onCaptionChange={handleCaptionChange}
                      onPaste={handleImagePaste}
                      section="partnership"
                      media={null}
                      index={index}
                      isLarge={false}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {popupImage && (
          <div 
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 9999,
              cursor: 'pointer'
            }}
            onClick={closePopup}
          >
            <div style={{ position: 'relative', maxWidth: '90vw', maxHeight: '90vh' }}>
              <img 
                src={popupImage}
                alt="ÌôïÎåÄ Î≥¥Í∏∞"
                style={{
                  maxWidth: '100%',
                  maxHeight: '100%',
                  borderRadius: '8px',
                  boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)'
                }}
              />
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  closePopup();
                }}
                style={{
                  position: 'absolute',
                  top: '10px',
                  right: '10px',
                  width: '32px',
                  height: '32px',
                  borderRadius: '50%',
                  backgroundColor: 'rgba(0, 0, 0, 0.7)',
                  color: 'white',
                  border: 'none',
                  cursor: 'pointer',
                  fontSize: '18px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontWeight: 'bold'
                }}
                title="Îã´Í∏∞"
              >
                √ó
              </button>
            </div>
            <div style={{
              position: 'absolute',
              bottom: '20px',
              left: '50%',
              transform: 'translateX(-50%)',
              color: 'white',
              fontSize: '14px',
              opacity: 0.8
            }}>
              ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ESCÎ•º ÎàåÎü¨ Îã´Í∏∞
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DailyReportPlatform;